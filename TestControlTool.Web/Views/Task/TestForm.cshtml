@using System.Reflection
@using BootstrapSupport
@using TestControlTool.Core.Models
@using TestControlTool.Web.BootstrapSupport.HtmlHelpers
@model Type
@{
    Layout = null;
}
@foreach (var property in Model.VisibleProperties(new string[0]))
{
    if (EditorWithHelp.IsSupportedType(property.PropertyType))
    {
        using (Html.ControlGroupFor(property.Name))
        {
            @Html.Label(property.Name, property.Name.ToSeparatedWords(), new { @class = "control-label", @for = property.Name, style = property.PropertyType == typeof(bool) ? "display: inline;" : string.Empty })

            <div class="controls"@(Html.Raw(property.PropertyType == typeof(bool) ? "style='display: inline; margin-left: 1em;'" : string.Empty))>
                @Html.Editor(property, "", new { @class = "input-xlarge" })
                @Html.ValidationMessage(property.Name, null, new { @class = "help-inline" })
            </div>
        }
    }
    else if (property.PropertyType.Name.Contains("List"))
    {
        <div class="wellList">
            <button type="button" id ="AddButton-@property.Name" class="close" aria-hidden="true" onclick="loadListItemsModal('@property.PropertyType.GetGenericArguments()[0].FullName', '@property.Name');" title="Add new item">+</button>
            @Html.Label("AddButton-" + property.Name, property.Name.ToSeparatedWords(), new { @class = "control-label" })
            <div class="controls">
                <ul style="padding-left: 20%;" class="sortable" id="@property.Name" type="@property.PropertyType.GetGenericArguments()[0].FullName">
                </ul>
            </div>
        </div>
    }
    else
    {
        Html.RenderPartial("NestedHelperView", new Pair<PropertyInfo, Pair<string, string>>(property, new Pair<string, string>(property.Name, "NewTestModal")));
    }
}


<script type="text/javascript">
    var listName = [];
    var isEditListItem = [];
    var listItemToEdit = [];

    function editListItem(obj) {
        var ul = $(obj).parent().parent();
        var parentId = ul.attr('id');
        var type = ul.attr('type');

        $('#ListItemsModalDiv').load('@Url.Action("ListItemModal", "Task")', { typeName: type, suiteType: suiteType, parentProperty: parentId }, function () {
            $('#ListItemsLabel-' + parentId).text($('#ListItemsLabel-' + parentId).text().replace('Add new', 'Edit'));
            $('#ListItemsButton-' + parentId).val('Apply');

            var jsonObject = JSON.parse($(obj).parent().attr('json'));
            
            var singleItem = $("#itemsProperties-" + parentId).find('#newItemEditorBox-' + parentId)[0];
            
            if (singleItem != undefined) {
                $(singleItem).val(jsonObject);
            } else {
                fillFormWithObject("itemsProperties-" + parentId, jsonObject);
            }
            
            listItemToEdit.push($(obj).parent());
            isEditListItem.push(true);
            listName.push(null);

            $('#ListItemsModal-' + parentId).modal('show');
        });
    }

    function loadListItemsModal(type, list) {
        $('#ListItemsModalDiv').load('@Url.Action("ListItemModal", "Task")', { typeName: type, suiteType: suiteType, parentProperty: list }, function () {
            listName.push(list);
            listItemToEdit.push(null);
            isEditListItem.push(false);
            $('#ListItemsModal-' + list).modal('show');
        });
    }

    $('#testFormDiv').ready(function () {
        //$.support.transition = false;

        //$('#testFormDiv').find('.collapse').collapse('hide');

        $('#testFormDiv').find('.sortable').each(function () {
            $(this).sortable();
            $(this).disableSelection();
        });


        $('#testFormDiv').find('[rel=popover]').popover();

        $('#testFormDiv').find('[rel=popover]').on("hidden", function (e) {
            e.stopPropagation(); //Once popover is hidden stop the event from going to parent
        });

        $("[data-disable-enabled='true']").each(function () {
            var obj = this;

            var disablingProperty = $(obj).attr('data-disabling-property');
            var disablingValue = $(obj).attr('data-disabling-value');

            $("#" + disablingProperty).on("change", function () {
                DisableByAttribute(obj, disablingProperty, disablingValue, true);
            });

            DisableByAttribute(obj, disablingProperty, disablingValue, false);
        });
    });

    $('#testFormDiv').find('.collapse').on('hidden', function (event) {
        event.stopPropagation();
    });

    $(document).ready(function () {
        $('#testFormDiv').find('.collapse').each(function () {
            var i = $(this).parent().find('label').find('i');

            $(this).on('show', function () {
                i.removeClass('icon-chevron-right', 100, function () {
                    i.addClass('icon-chevron-down', 100);
                });
            });

            $(this).on('hide', function () {
                i.removeClass('icon-chevron-down', 100, function () {
                    i.addClass('icon-chevron-right', 100);
                });
            });

            //$(this).collapse('show');
        });
    });
</script>
