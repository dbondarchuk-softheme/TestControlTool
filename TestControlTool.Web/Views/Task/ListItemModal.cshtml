@using System.Reflection
@using BootstrapSupport
@model Type
@{
    Layout = null;
}
@if (Model == typeof(string))
{
    <script src="~/Scripts/bootbox.min.js"></script>
}

<div class="modal hide fade" id="ListItemsModal" tabindex="-1" role="dialog" aria-labelledby="Edit List" aria-hidden="true">
    <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
        <h3 id="ListItemsLabel">Add new @Model.Name</h3>
    </div>
    <div class="modal-body" id="itemsProperties">
        @if (Model == typeof(string) || Model == typeof(int))
        {
            <div class="control-group">
            <label class="control-label" for="newItemEditorBox">
                Add item&nbsp;&nbsp;&nbsp;
                <input type="text" id="newItemEditorBox" class="input-xlarge" />
                <span class="help-inline error" id="newItemTextBoxValidation"></span>
            </label>
        </div>
        }
        @if (Model == typeof(bool))
        {
            <div class="control-group">
            <label class="control-label" for="newItemCheckBox">
                Add item&nbsp;&nbsp;&nbsp;
                @Html.CheckBox("newItemCheckBox")
                <span class="help-inline error" id="newItemCheckBoxValidation"></span>
            </label>
        </div>
        }
        @if (Model.IsEnum)
        {
            <div class="control-group">
            <label class="control-label" for="newItemEditorBox">
                Add item&nbsp;&nbsp;&nbsp;
                @Html.EnumDropDownList("newItemEditorBox", Model)
                <span class="help-inline error" id="newItemDropDownValidation"></span>
            </label>
        </div>
        }
        @foreach (var property in Model.GetProperties(BindingFlags.Public | BindingFlags.Instance).Where(x => x.CanWrite && x.CanRead))
        {
            using (Html.ControlGroupFor(property.Name))
            {
                @Html.Label(property.Name.ToSeparatedWords(), new { @class = "control-label" })
                <div class="controls">
                    @if (property.PropertyType == typeof(string) || property.PropertyType == typeof(int))
                    {
                        @Html.TextBox(property.Name, "", new { @class = "input-xlarge" })
                        @Html.ValidationMessage(property.Name, null, new { @class = "help-inline error" })
                    }
                    else if (property.PropertyType == typeof(bool))
                    {
                        @Html.CheckBox(property.Name, false, new { @class = "input-xlarge" })
                        @Html.ValidationMessage(property.Name, null, new { @class = "help-inline error" })
                    }
                    else if (property.PropertyType.IsEnum)
                    {
                        @Html.EnumDropDownList(property.Name, property.PropertyType)
                        @Html.ValidationMessage(property.Name, null, new { @class = "help-inline error" })
                    }
                </div>
            }
        }
    </div>
    <div class="modal-footer">
        <button class="btn" data-dismiss="modal" aria-hidden="true">Close</button>
        <input type="submit" class="btn btn-primary" value="Add" id="ListItemsButton" onclick="saveItem();" />
    </div>
</div>
<script type="text/javascript">
    function saveItem() {
        if (isEditListItem) {
            editItem();
        } else {
            addItem();
        }
    }

    function editItem() {
        if (!checkFirstField()) {
            return;
        }

        var attributes = "";
        var obj = $($('#itemsProperties').find('input[type!=hidden],select')[0]);
        var name = obj.val();

        @if (Model == typeof(string) || Model == typeof(int) || Model.IsEnum)
        {
            <text>
                attributes = ' item = "' + name + '"';
            </text> 
        }
        else if (Model == typeof(bool))
        {
            <text>
                attributes = ' item = "' + obj.is(':checked') + '"';
            </text> 
        }
        else
        {
            <text>
                $('#itemsProperties').find('input[type!=hidden][type!=checkbox],select').each(function () {
                    attributes += " " + $(this).attr('id') + "='" + $(this).val() + "'";
                });

                $('#itemsProperties').find('input[type=checkbox],select').each(function () {
                    attributes += " " + $(this).attr('id') + "='" + $(this).is(':checked') + "'";
                });
            </text>
        }
        
        listItemToEdit.replaceWith("<li" + attributes + "><a href='#' onclick=\"editListItem('@Model.FullName', this); return false;\">" + name + "</a><button type='button' class='close' aria-hidden='true' onclick='removeItem(this)'>×</button></li>");
        
        $('#ListItemsModal').modal('hide');
    }

    function addItem() {
        if (!checkFirstField()) {
            return;
        }

        var attributes = "";
        var obj = $($('#itemsProperties').find('input[type!=hidden],select')[0]);
        var name = obj.val();

        @if (Model == typeof(string) || Model == typeof(int) || Model.IsEnum)
        {
            <text>
                attributes = ' item = "' + name + '"';
            </text> 
        }
        else if (Model == typeof(bool))
        {
            <text>
                attributes = ' item = "' + obj.is(':checked') + '"';
            </text> 
        }
        else
        {
            <text>
                $('#itemsProperties').find('input[type!=hidden][type!=checkbox],select').each(function () {
                    attributes += " " + $(this).attr('id') + "='" + $(this).val() + "'";
                });

                $('#itemsProperties').find('input[type=checkbox],select').each(function () {
                    attributes += " " + $(this).attr('id') + "='" + $(this).is(':checked') + "'";
                });
            </text>
        }
        
        $('#' + listName).append("<li" + attributes + "><a href='#' onclick=\"editListItem('@Model.FullName', this); return false;\">" + name + "</a><button type='button' class='close' aria-hidden='true' onclick='removeItem(this)'>×</button></li>");
        $('#' + listName).height('auto');
        $('#' + listName).collapse('show');

        $('#ListItemsModal').modal('hide');
    }
    
    function checkFirstField() {
        var first = $('#itemsProperties').find('input,select').first();
        
        if (first.val().length == 0) {
            first.parent().find('span').text('Please, fill the first element. It\'s need for identification of items');
            return false;
        }

        first.parent().find('span').val('');
        return true;
    }
</script>